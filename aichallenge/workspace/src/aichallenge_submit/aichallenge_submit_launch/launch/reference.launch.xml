<?xml version="1.0" encoding="UTF-8"?>
<launch>
  <!-- Essential parameters -->
  <arg name="vehicle_id" default="$(env VEHICLE_ID default)" description="vehicle specific ID"/>
  <arg name="use_sim_time" default="false"/>
  <arg name="map_path" default="$(find-pkg-share aichallenge_submit_launch)/map"/>
  <arg name="vehicle_model" default="racing_kart"  description="vehicle model name"/>
  <arg name="sensor_model" default="racing_kart_sensor_kit" description="sensor model name"/>
  <arg name="simulation" description="used for sensor kit param"/>
  <arg name="is_rosbag" description="If true, not start controller"/>
  <!-- Optional parameters -->
  <!-- Map -->
  <arg name="lanelet2_map_file" default="lanelet2_map.osm" description="lanelet2 map file name"/>
  <arg name="pointcloud_map_file" default="pointcloud_map.pcd" description="pointcloud map file name"/>

  <!-- Vehicle -->
  <arg name="launch_vehicle_interface" default="false"/>
  <log message="echo launch param use_sim_time: $(var use_sim_time) launch_vehicle_interface: $(var launch_vehicle_interface) sensor_model: $(var sensor_model)"/>

  <!-- Global parameters -->
  <group scoped="false">
    <include file="$(find-pkg-share global_parameter_loader)/launch/global_params.launch.py">
      <arg name="use_sim_time" value="$(var use_sim_time)"/>
      <arg name="vehicle_model" value="$(var vehicle_model)"/>
    </include>
  </group>

  <group>
    <arg name="model_file" default="$(find-pkg-share tier4_vehicle_launch)/urdf/vehicle.xacro" description="path to the file of model settings (*.xacro)"/>
    <arg name="config_dir" default="$(find-pkg-share racing_kart_sensor_kit_description)/config"/>
    <node name="robot_state_publisher" pkg="robot_state_publisher" exec="robot_state_publisher">
      <param name="robot_description" value="$(command 'xacro $(var model_file) vehicle_model:=$(var vehicle_model) sensor_model:=$(var sensor_model) config_dir:=$(var config_dir) simulation:=$(var simulation)' 'warn')"/>
    </node>
  </group>

  <!-- Sensing -->
  <group>
    <push-ros-namespace namespace="sensing"/>
    <!-- Vehicle Velocity Converter  -->
    <include file="$(find-pkg-share vehicle_velocity_converter)/launch/vehicle_velocity_converter.launch.xml">
      <arg name="input_vehicle_velocity_topic" value="/vehicle/status/velocity_status"/>
      <arg name="output_twist_with_covariance" value="/sensing/vehicle_velocity_converter/twist_with_covariance"/>
      <arg name="config_file" value="$(find-pkg-share aichallenge_submit_launch)/config/vehicle_velocity_converter.param.yaml"/>
    </include>
    <group>
      <push-ros-namespace namespace="imu"/>
      <arg name="imu_corrector_param_file" default="$(find-pkg-share imu_corrector)/config/imu_corrector.param.yaml"/>
      <include file="$(find-pkg-share imu_corrector)/launch/imu_corrector.launch.xml">
        <arg name="input_topic" value="imu_raw"/>
        <arg name="output_topic" value="imu_data"/>
        <arg name="param_file" value="$(var imu_corrector_param_file)"/>
      </include>
    </group>

    <group>
      <push-ros-namespace namespace="gnss"/>
      <include file="$(find-pkg-share gps_module)/launch/gps_module.launch.xml"/>
    </group>
  </group>

    <!-- Localization -->
  <let name="pose_additional_delay_var" value="0.5" />
  <group>
    <push-ros-namespace namespace="localization"/>
    <include file="$(find-pkg-share gyro_odometer)/launch/gyro_odometer.launch.xml">
      <arg name="input_vehicle_twist_with_covariance_topic" value="/sensing/vehicle_velocity_converter/twist_with_covariance"/>
      <arg name="input_imu_topic" value="/sensing/imu/imu_data"/>
      <arg name="output_twist_with_covariance_topic" value="/localization/twist_estimator/twist_with_covariance"/>
      <arg name="output_twist_with_covariance_raw_topic" value="/localization/twist_estimator/twist_with_covariance_raw"/>
      <!-- Scale Value -->
      <arg name="scale_gyro_ang_vel_x" value="1.0"/>
      <arg name="scale_gyro_ang_vel_y" value="1.0"/>
      <arg name="scale_gyro_ang_vel_z" value="1.0"/>
      <arg name="scale_vehicle_vel_x" value="1.0"/>
    </include>

    <!-- Imu Gnss Poser -->
    <node pkg="imu_gnss_poser" exec="imu_gnss_poser_node" name="imu_gnss_poser" output="screen">
      <remap from="/sensing/gnss/pose_with_covariance" to="/sensing/gnss/gps_module/pose_with_covariance"/>
      <param from="$(find-pkg-share imu_gnss_poser)/config/imu_gnss_poser.param.yaml"/>
       <!-- Use true when AWSIM(Simulator) is used -->
      <param name="specific_covariance" value="$(var simulation)"/>
    </node>

    <!-- EKF_Localizer -->
    <include file="$(find-pkg-share ekf_localizer)/launch/ekf_localizer.launch.xml">
      <arg name="show_debug_info" value="false"/>
      <arg name="enable_yaw_bias_estimation" value="false"/>
      <arg name="predict_frequency" value="50.0"/>
      <arg name="tf_rate" value="50.0"/>
      <arg name="extend_state_step" value="100"/>

      <arg name="input_initial_pose_name" value="/localization/initial_pose3d"/>
      <arg name="input_trigger_node_service_name" value="trigger_node"/>

      <!-- for Pose measurement -->
      <arg name="input_pose_with_cov_name" value="/localization/imu_gnss_poser/pose_with_covariance"/>
      <arg name="pose_additional_delay" value="$(var pose_additional_delay_var)"/>
      <arg name="pose_measure_uncertainty_time" value="0.01"/>
      <arg name="pose_smoothing_steps" value="1"/>
      <arg name="pose_gate_dist" value="10000.0"/>

      <!-- for twist measurement -->
      <arg name="input_twist_with_cov_name" value="/localization/twist_estimator/twist_with_covariance"/>
      <arg name="twist_additional_delay" value="0.0"/>
      <arg name="twist_smoothing_steps" value="1"/>
      <arg name="twist_gate_dist" value="10000.0"/>

      <!-- for process model -->
      <arg name="proc_stddev_yaw_c" value="0.005"/>
      <arg name="proc_stddev_vx_c" value="10.0"/>
      <arg name="proc_stddev_wz_c" value="5.0"/>

      <!-- output topic name -->
      <arg name="output_odom_name" value="kinematic_state"/>
      <arg name="output_pose_name" value="pose"/>
      <arg name="output_pose_with_covariance_name" value="/localization/pose_with_covariance"/>
      <arg name="output_biased_pose_name" value="biased_pose"/>
      <arg name="output_biased_pose_with_covariance_name" value="biased_pose_with_covariance"/>
      <arg name="output_twist_name" value="twist"/>
      <arg name="output_twist_with_covariance_name" value="twist_with_covariance"/>
    </include>

    <!-- twist2accel -->
    <group>
      <node pkg="twist2accel" exec="twist2accel" name="twist2accel" output="screen">
        <param name="accel_lowpass_gain" value="0.9"/>
        <param name="use_odom" value="true"/>
        <remap from="input/odom" to="/localization/kinematic_state"/>
        <remap from="input/twist" to="/localization/twist_estimator/twist_with_covariance"/>
        <remap from="output/accel" to="/localization/acceleration"/>
      </node>
    </group>

  </group>

  <!-- Dummy Perception -->
  <node pkg="dummy_perception_publisher" exec="empty_objects_publisher" name="empty_objects_publisher" output="screen">
    <remap from="~/output/objects" to="/perception/object_recognition/objects"/>
  </node>

  <!-- Planning -->
  <group unless="$(var is_rosbag)">
    <push-ros-namespace namespace="planning"/>

    <!-- scenario_planning -->
    <group>
      <push-ros-namespace namespace="scenario_planning"/>
      <!-- operation_mode -->
      <group>
        <arg name="cmd" default="ros2 topic pub /system/operation_mode/state autoware_adapi_v1_msgs/msg/OperationModeState '{
          mode: 1,
          is_autoware_control_enabled: true,
          is_in_transition: false,
          is_stop_mode_available: true,
          is_autonomous_mode_available: true,
          is_local_mode_available: true,
          is_remote_mode_available: true
          }'"/>
        <executable cmd="$(var cmd)" name="operation_mode_pub" shell="true"/>
      </group> <!-- operation_mode -->

      <!-- Customizable -->
      <node pkg="path_to_trajectory" exec="path_to_trajectory_node" name="path_to_trajectory" output="screen">
        <param from="$(find-pkg-share path_to_trajectory)/config/params.yaml" />
      </node>

    </group>
  </group>


  <!-- Control -->
    <!-- MPC & PID -->
    <arg name="use_external_target_vel" default="true"/>
    <arg name="external_target_vel" default="5.0"/>
    <arg name="lateral_deviation" default="0.0"/>

    <!-- engage_transition_manager -->
    <arg name="enable_obstacle_collision_checker" default="true"/>
    <arg name="lateral_controller_mode" default="mpc"/>
    <arg name="longitudinal_controller_mode" default="pid"/>
    <arg name="enable_autonomous_emergency_braking" default="true"/>
    <arg name="check_external_emergency_heartbeat" default="true"/>
    <arg name="trajectory_follower_mode" default="trajectory_follower_node"/>
    <arg name="nearest_search_param_path" default="$(find-pkg-share aichallenge_submit_launch)/config/common/nearest_search.param.yaml"/>
    <arg name="trajectory_follower_node_param_path" default="$(find-pkg-share aichallenge_submit_launch)/config/control/trajectory_follower_node.param.yaml"/>
    <arg name="lon_controller_param_path" default="$(find-pkg-share aichallenge_submit_launch)/config/control/lateral/mpc.param.yaml"/>
    <arg name="lat_controller_param_path" default="$(find-pkg-share aichallenge_submit_launch)/config/control/longitudinal/pid.param.yaml"/>
    <arg name="vehicle_param_file" default="$(find-pkg-share racing_kart_description)/config/vehicle_info.param.yaml"/>
    <arg name="use_sim_time" default="false"/>

  <group unless="$(var is_rosbag)">
    <node pkg="trajectory_follower_node" exec="controller_node_exe" name="controller" output="screen">
      <remap from="~/input/reference_trajectory" to="/planning/scenario_planning/trajectory"/>
      <remap from="~/input/current_odometry" to="/localization/kinematic_state"/>
      <remap from="~/input/current_steering" to="/vehicle/status/steering_status"/>
      <remap from="~/input/current_accel" to="/localization/acceleration"/>
      <remap from="~/input/current_operation_mode" to="/system/operation_mode/state"/>
      <remap from="~/output/predicted_trajectory" to="lateral/predicted_trajectory"/>
      <remap from="~/output/lateral_diagnostic" to="lateral/diagnostic"/>
      <remap from="~/output/slope_angle" to="longitudinal/slope_angle"/>
      <remap from="~/output/longitudinal_diagnostic" to="longitudinal/diagnostic"/>
      <remap from="~/output/stop_reason" to="longitudinal/stop_reason"/>
      <remap from="~/output/control_cmd" to="/control/command/control_cmd"/>
      <param name="lateral_controller_mode" value="$(var lateral_controller_mode)"/>
      <param name="longitudinal_controller_mode" value="$(var longitudinal_controller_mode)"/>
      <param from="$(var nearest_search_param_path)"/>
      <param from="$(var trajectory_follower_node_param_path)"/>
      <param from="$(var lon_controller_param_path)"/>
      <param from="$(var lat_controller_param_path)"/>
      <param from="$(var vehicle_param_file)"/>
      <remap from="input/kinematics" to="/localization/kinematic_state"/>
      <remap from="input/trajectory" to="/planning/scenario_planning/trajectory"/>
      <remap from="output/control_cmd" to="/control/command/control_cmd"/>    
    </node>
  </group>

  <!-- Map -->
  <group>
    <push-ros-namespace namespace="map"/>

    <!-- map_container -->
    <node_container pkg="rclcpp_components" exec="component_container" name="map_container" namespace="">

      <!-- map_loader::Lanelet2MapLoaderNode -->
      <composable_node pkg="map_loader" plugin="Lanelet2MapLoaderNode" name="lanelet2_map_loader" namespace="">
        <remap from="output/lanelet2_map" to="vector_map" />
        <param name="lanelet2_map_path" value="$(var map_path)/$(var lanelet2_map_file)" />
        <param from="$(find-pkg-share aichallenge_submit_launch)/config/map/lanelet2_map_loader.param.yaml" />
        <extra_arg name="use_intra_process_comms" value="false" />
      </composable_node>

      <!-- map_loader::Lanelet2MapVisualizationNode -->
      <composable_node pkg="map_loader" plugin="Lanelet2MapVisualizationNode" name="lanelet2_map_visualization" namespace="">
        <remap from="input/lanelet2_map" to="vector_map" />
        <remap from="output/lanelet2_map_marker" to="vector_map_marker" />
        <param name="lanelet2_map_path" value="$(var map_path)/$(var lanelet2_map_file)" />
        <param from="$(find-pkg-share aichallenge_submit_launch)/config/map/lanelet2_map_loader.param.yaml" />
        <extra_arg name="use_intra_process_comms" value="false" />
      </composable_node>

      <!-- map_tf_generator::VectorMapTFGeneratorNode -->
      <composable_node pkg="map_tf_generator" plugin="VectorMapTFGeneratorNode" name="vector_map_tf_generator" namespace="">
        <param name="map_frame" value="map" />
        <param name="viewer_frame" value="viewer" />
        <extra_arg name="use_intra_process_comms" value="false" />
      </composable_node>

    </node_container>

  </group> <!-- map -->

  <!-- vehicle -->
  <group if="$(var launch_vehicle_interface)">
    <include file="$(find-pkg-share raw_vehicle_cmd_converter)/launch/raw_vehicle_converter.launch.xml">
      <arg name="converter_param_path" value="$(find-pkg-share aichallenge_submit_launch)/config/converter.param.yaml"/>
      <arg name="csv_path_accel_map" value="$(find-pkg-share aichallenge_submit_launch)/data/accel_map.csv"/>
      <arg name="csv_path_brake_map" value="$(find-pkg-share aichallenge_submit_launch)/data/brake_map.csv"/>

      <arg name="max_throttle" value="1.0"/>
      <arg name="max_brake" value="1.0"/>
      <arg name="convert_accel_cmd" value="true"/>
      <arg name="convert_brake_cmd" value="true"/>
      <arg name="convert_steer_cmd" value="false"/>

      <arg name="input_control_cmd" value="/control/command/control_cmd"/>
      <arg name="input_odometry" value="/localization/kinematic_state"/>
      <arg name="input_steering" value="/vehicle/status/steering_status"/>
      <arg name="output_actuation_cmd" value="/control/command/actuation_cmd"/>
    </include>
  </group>

  <!-- API -->
  <group>
    <!-- default_ad_api -->
    <include file="$(find-pkg-share default_ad_api)/launch/default_ad_api.launch.py" />

    <!-- ad_api_adaptors -->
    <include file="$(find-pkg-share ad_api_adaptors)/launch/rviz_adaptors.launch.xml" />
  </group>

  <!-- IF REAL KART, Please Comment Out -->
  <!-- Pose Cov Transformer Node -->
  <node pkg="pose_transformer" exec="pose_transformer" name="pose_transformer" output="screen">
    <!-- To-do, tomoki Only for interfacebag -->
    <param name="publish_gnss_pose_original" value="$(var is_rosbag)"/>
  </node>

  <!-- Acc  culculator Node -->
  <node pkg="vehicle_state_culculator" exec="vehicle_state_culculator_node" name="vehicle_state_culculator_node" output="screen"/>

  <!-- Timer Node -->
  <include file="$(find-pkg-share section_timer)/launch/section_timer.launch.xml"/>


</launch>
